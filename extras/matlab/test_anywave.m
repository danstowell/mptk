function test_anywave( utilsPath );

% TEST_ANYWAVE Tests the utils mpd, mpf and mpr, using synthetic data
%
%    test_anywave( utilsPath )
%
% utilsPath is the path where are stored the utils mpd, mpf, mpr
%
% Calls the function create_synthetic_data to create :
% - 1 monochannel table
% - 1 table with two channels
%
% - 1 monophonic signal
% - 3 stereophonic signals
%
% The signals are sparsely composed of atoms of one of the tables (see
% create_synthetic_data for details). This function show how well the
% generating atoms are retrieved via Matching Pursuit, using the MPTK
% library.
%
% The utils mpd, mpf and mpr are called to respectively decompose the
% signals, filter the atoms and recompose the signals.
%
% A plot shows the difference between the original signal and the
% retrieved signal
%
%%
%% Authors:
%% Sylvain Lesage & Sacha Krstulovic & Rémi Gribonval
%% Copyright (C) 2005 IRISA                                              
%%
%% This script is part of the Matching Pursuit Library package,
%% distributed under the General Public License.
%%
%% SVN log:
%%   $Author: sacha $
%%   $Date$
%%   $Revision$
%%

tempPath = '/udd/slesage/MPTK/TEST';

filterLen = 8;
filterShift = 1;
numFilters = 8;
sigLen = 100;
numUsedFilters = 10;

fprintf('\nCreating temporary synthetic data');
create_synthetic_data( tempPath, filterLen, filterShift, numFilters, sigLen, numUsedFilters )

numIt = 100;
numKeptAtoms = 15;

quiet = '-q';

load( [tempPath '/ANYWAVE_synthetic_data.mat'] );

% signal 1

fprintf('\nProcessing signal 1');
bookName1 = [tempPath '/temp_book_1.bin'];
bookName2 = [tempPath '/temp_book_2.bin'];
t_line = sprintf('%smpd %s -R 1 -D %s -n %d %s %s', utilsPath, quiet, [tempPath '/dict1.xml'], numIt, [tempPath '/sig1.wav'], bookName1);
unix(t_line);
t_line = sprintf('%smpf %s --index=[0:%lu] %s %s', utilsPath, quiet, numKeptAtoms - 1, bookName1, bookName2);
unix(t_line);
t_line = sprintf('%smpr %s %s %s', utilsPath, quiet, bookName2, [tempPath '/sig1_rec.wav']);
unix(t_line);

sigRec1 = wavread([tempPath '/sig1_rec.wav']);

unix(sprintf('rm -f %s',bookName1));
unix(sprintf('rm -f %s',bookName2));

figure(1);
subplot(211);
plot(sig1');
title(sprintf('Original signal 1 (generated by %lu atoms)',numUsedFilters));
subplot(212);
plot(sigRec1);
title(sprintf('Signal 1 reconstructed with the first %lu atoms',numKeptAtoms));

fprintf(' - Press a key');
drawnow;
pause;


% signal 2
fprintf('\nProcessing signal 2');

bookName1 = [tempPath '/temp_book_1.bin'];
bookName2 = [tempPath '/temp_book_2.bin'];
t_line = sprintf('%smpd %s -R 1 -D %s -n %d %s %s', utilsPath, quiet, [tempPath '/dict1.xml'], numIt, [tempPath '/sig2.wav'], bookName1);
unix(t_line);
t_line = sprintf('%smpf %s --index=[0:%lu] %s %s', utilsPath, quiet, numKeptAtoms - 1, bookName1, bookName2);
unix(t_line);
t_line = sprintf('%smpr %s %s %s', utilsPath, quiet, bookName2, [tempPath '/sig2_rec.wav']);
unix(t_line);

sigRec2 = wavread([tempPath '/sig2_rec.wav']);

unix(sprintf('rm -f %s',bookName1));
unix(sprintf('rm -f %s',bookName2));

figure(1);
subplot(211);
plot(sig2');
title(sprintf('Original signal 2 (generated by %lu atoms)',numUsedFilters));
title('Original signal 2');
subplot(212);
plot(sigRec2);
title(sprintf('Signal 2 reconstructed with the first %lu atoms',numKeptAtoms));


fprintf(' - Press a key');
drawnow;
pause;


% signal 3
fprintf('\nProcessing signal 3');

bookName1 = [tempPath '/temp_book_1.bin'];
bookName2 = [tempPath '/temp_book_2.bin'];
t_line = sprintf('%smpd %s -R 1 -D %s -n %d %s %s', utilsPath, quiet, [tempPath '/dict1.xml'], numIt, [tempPath '/sig3.wav'], bookName1);
unix(t_line);
t_line = sprintf('%smpf %s --index=[0:%lu] %s %s', utilsPath, quiet, numKeptAtoms - 1, bookName1, bookName2);
unix(t_line);
t_line = sprintf('%smpr %s %s %s', utilsPath, quiet, bookName2, [tempPath '/sig3_rec.wav']);
unix(t_line);

sigRec3 = wavread([tempPath '/sig3_rec.wav']);

unix(sprintf('rm -f %s',bookName1));
unix(sprintf('rm -f %s',bookName2));

figure(1);
subplot(211);
plot(sig3');
title(sprintf('Original signal 3 (generated by %lu atoms)',numUsedFilters));
title('Original signal 3');
subplot(212);
plot(sigRec3);
title(sprintf('Signal 3 reconstructed with the first %lu atoms',numKeptAtoms));

fprintf(' - Press a key');
drawnow;
pause;



% signal 4
fprintf('\nProcessing signal 4');

bookName1 = [tempPath '/temp_book_1.bin'];
bookName2 = [tempPath '/temp_book_2.bin'];
t_line = sprintf('%smpd %s -R 1 -D %s -n %d %s %s', utilsPath, quiet, [tempPath '/dict2.xml'], numIt, [tempPath '/sig4.wav'], bookName1);
unix(t_line);
t_line = sprintf('%smpf %s --index=[0:%lu] %s %s', utilsPath, quiet, numKeptAtoms - 1, bookName1, bookName2);
unix(t_line);
t_line = sprintf('%smpr %s %s %s', utilsPath, quiet, bookName2, [tempPath '/sig4_rec.wav']);
unix(t_line);

sigRec4 = wavread([tempPath '/sig4_rec.wav']);

unix(sprintf('rm -f %s',bookName1));
unix(sprintf('rm -f %s',bookName2));

figure(1);
subplot(211);
plot(sig4');
title(sprintf('Original signal 4 (generated by %lu atoms)',numUsedFilters));
subplot(212);
plot(sigRec4);
title(sprintf('Signal 4 reconstructed with the first %lu atoms',numKeptAtoms));

drawnow;

fprintf('\nDeleting temporary data');
unix(sprintf('rm -f %s/sig1.wav',tempPath));
unix(sprintf('rm -f %s/sig2.wav',tempPath));
unix(sprintf('rm -f %s/sig3.wav',tempPath));
unix(sprintf('rm -f %s/sig4.wav',tempPath));

unix(sprintf('rm -f %s/sig1_rec.wav',tempPath));
unix(sprintf('rm -f %s/sig2_rec.wav',tempPath));
unix(sprintf('rm -f %s/sig3_rec.wav',tempPath));
unix(sprintf('rm -f %s/sig4_rec.wav',tempPath));

unix(sprintf('rm -f %s/table1.bin',tempPath));
unix(sprintf('rm -f %s/table2.bin',tempPath));
unix(sprintf('rm -f %s/table1_data.bin',tempPath));
unix(sprintf('rm -f %s/table2_data.bin',tempPath));

unix(sprintf('rm -f %s/dict1.xml',tempPath));
unix(sprintf('rm -f %s/dict2.xml',tempPath));

unix(sprintf('rm -f %s/ANYWAVE_synthetic_data.mat',tempPath));

fprintf('\n');
