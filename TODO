				 -----------------
                                       TODO
				 -----------------

   --------------
I) GENERAL TOPICS
   --------------

* URGENT:
  - Document the main known bugs (clipping, pb with harmonic atoms)
  - CLIPPING ISSUE: see section III) below.
  - Extract the core functionalities of mpf/mpr etc. (done for mpd),
    and add them to the MP_Mpd_Core_c class so that they can be called
    from any kind of interface (GUI and/or command line).*Features*

* PRE-RELEASE:
  - Dict/block/book/atom I/O:
      + do more error checks on writes ?
      + decide upon a strategy for the book parsing in binary and text
  - Reinforce the detection/warning of wrong syntaxes in XML dictionaries.
  - mpf : select a given channel ?

* BUGS:
  - Lots of them in the GUI (section IV below).
  - harmonic blocks can select atoms that increase the energy !
  - segfault can occur (in GUI at least) if a small signal is plugged into a dictionary 
    which Gabor blocks have too long windows

				 -----------------

    --------------------------------
II) IMPROVEMENTS TO THE CORE LIBRARY
    --------------------------------

* GENERAL CODE STRUCTURE
  - discuss/reform the notion of support in the multi-channel case. Do we really
    need different supports per channel ? If yes, shouldn't that be the case
    for the signals too ? E.G., this introduces an indefinite case
    when building a signal from an atom waveform: if the support is different
    on each channel, what should the signal.numSamples be ?
    => better reflection on objects interaction. (Would it make sense that
       MP_Atom_c inherits from MP_Signal_c ?)
  - move the header from atom_classes/atom_classes.h (read_atom,write_atom)
    to atom.h, and make it a factory method. 
  - introduce a true plugin structure to load new atom classes (as DLLs ?) without a recompile.
  - split dict::iterate_mp into update_all update_ip update_max
  - fix integer types : unsigned long int -> uint32 etc
  - fix char/int in array arguments
  - standardize semantic of the info() print() mechanisms
  - replace MP_Sample_t with MP_Real_t, eliminate MP_Sample_t and remove the unnecessary castings
  - reinforce the test suite
  - restructure atom / book classes to introduce molecules MP_Molecule_c -> MP_Atom_c -> MP_Gabor_c ...
							   MP_Molecule_c -> MP_Book_c
							   book->append(MP_Molecule_c)
  - replace round by a simpler ANSI trick, and check double-to-int potential overflow
    where applicable.

* ALGORITHMIC ENHANCEMENTS/FUNCTIONALITIES
  - Solve the clipping problem introduced by the PCM format in libsndfile. *bug*
  - more testing of the chirp and harmonic blocks *bug*
  - enable mpd_demix to use one dictionary for each source *feature*
  - enable mpd_demix with a matrix of filters *feature*
  - allow atom selection with weights/penalties (applications include auditory masking)
  - implement orthonormal matching pursuit
  - check the divergence between signal.compute_energy() and signal.energy

* SPEED
  - Go multi-thread, pthreads style, in dict.update_ip() . *feature*
  - OPTIONAL: tabulate the cosines in a "cosines server" ?
    Note:
       cos( omega*t + phi ) = cos( omega*t )cos( phi ) - sin( omega*t )sin( phi )
    => compute cos(phi)/sin(phi) once, get some tabulated cos(omega*t)/sin(omega*t).
  - accelerate first step of MP by computing IP only on good frames

* MID TERM:
  - allow for chirp detection in harmonic blocks *NC*
  - Make a parsable/storable format for mpf sorting rules, that could be
    compiled into binary masks for book masking; cleanup the atom-sorting
    mechanism (atom.satisfies etc.).*features*

* LONG TERM:
  - create a MP_Mixer_c class *features mpd-demix core*
  - new atom classes: chirps, wavelets, arbitrary waveform templates,
    LPC-style spectral envelopes for unvoiced sounds *NC*

* MISC/OPTIONAL:
  - turn MP_Support_t into a class to get constructors (especially a clean copy
    constructor) and nicer toFrame/fromFrame stuff ? Or make a merge_support
    function to get a mono-channel support which merges the supports across the
    channels ?


				 -----------------
     --------------------------
III) INTERFACES, GENERAL TOPICS
     --------------------------

* TFMAPs
  - Do signal.add_spectro_to_tfmap( tfmap ) for the GUI.
  - factor some code in MP_Atom_C::add_to_tfmap() ?
  - implement pseudo wigner_ville for non Gaussian windows
  - fuse the Wigner-Ville function into the add_to_tfmap function ?
  - store max and sum by line / by column (to possibly normalize the display and to display marginal tf cuts)
  - add bark/mel scales for frequencies ?
  - more debug to the TFMaps.
  - implement some TFMap output for the anywave atoms.
  - tfmaps are sometimes incorrectly displayed (wrong time location) for Gabor_Atom_c
  and should have float tMin tMax instead of int

* FILE I/O
  - CLIPPING ISSUE:
    get rid of libsndfile to read wav files or add a 'gain' option when reading/writing sound files
    (to solve the "clipping problem" : when writing signals to wav format clipping can happen which
     is not due to MP: even if the analyzed signal has amplitude strictly less than one, the residual 
     or the approximant might have samples that exceeds one for early iterations)*bug*
  - allow read of aiff, pcm, ...* Features*
  - choice between sample units and physical units (Hertz, seconds, ...) for blocks / atoms I/O ?
    need to be consistent : harmonic blocks use Hertz, Gabor use normalized freq * Features*

				 -----------------
    ------------------------
IV) GRAPHICAL USER INTERFACE
    ------------------------

* BUGS
  - ZOOM:
    - left-click in signal view and drag the rectangle out of the main window -> segfault.
      Seems it does it when loading signal only, but not when loading book (check more). *bug*
    - double click in signal view -> segfault (atom view seems OK).*bug*
  - when loading a signal, the "play" and "stop" buttons are active, but not the "pause"
    button => harmonize.
  - Are there still bugs when loading bugs/shubert.book ?

* CODE STRUCTURE
  - switch to english names in the code, make methods virtual when useful


* WISHLIST *features*
  - limits settings:
    - add an "Apply" button
    - make the inconsistency checking messages more explicit
  - display the scale of the time/frequency/amplitude axes
  - add a tool to build new dictionaries
  - implement a pile of zoom event to 'undo' a zooming
  - provide a tool for reconstruction with options 
  - add a panpot view (for BSS type purposes)
  - provide an interface for mpf and mpd_demix
  - go multi-document (1 document = 1 mpd_core ?)
  - selection, cut and paste of atoms from one document to another.
  - circle the closest atom, select/edit/move it
    => MP_Atom_c::dist_to_tfpoint(t,f) [float]
       MP_Atom_c::get_tf_support() [returns a union of polygons ?]
       MP_Atom_c::description() [string]
       MP_Book_c::get_closest_atom(t,f,mask) 
       MP_TF_Map_c::intersect_tf_support() [computation with geometric approach]
  - add a control bar similar to the color control bar allowing the selection of atoms duration
  - provide a tool for reconstruction with options (scale, ...)
  - implement masks and filters (= virtual book)


				 -----------------
   ---------------
V) TEXT INTERFACES
   ---------------

* WISHLIST
  - mpd/mpr/mpf/mpcat/mpd_demix: leave choice between binary or text when
    reading or writing from/to a pipe? *features with win 32 exec files*
  - complete mpview.m by dealing with several channels
  - make a mpmix util to mix sound sources directly in C++ ?


				 -----------------
    ----------------
VI) MATLAB INTERFACE
    ----------------

* BUGS
  - bookover.m: check if the spectrogram image masks the atom patches;
                modify the height of the spectrogram image accordingly.

* WISHLIST
  - bookover.m: add window length/shift/type controls for the spectrogram,
                to override the default ones.
  - Check/distribute bookwrite ?


				 -----------------
     ----------------------------------
VII) AUTOMAKE/AUTOCONF, BUILDING SYSTEM
     ----------------------------------

* WISHLIST
  - options in autoconf/automake to build a shared lib ?
  - conversely, options to make sure everything is statically linked
    (e.g., to avoid DLL hell under Cygwin) ?


				 -----------------
      -------------
VIII) DOCUMENTATION
      -------------

* WISHLIST
  - create a web site with examples
  - document 'how to add a block' including how to interface with dict_scanner
  - Document the scanner
  - Document the messaging system
  - Make a simplified API reference for the blocks/atoms
  - Make a basic GUI user man
  - Document the extra libs: original website, short description, compilation/install "tricks" etc.
    Note: for wxWidgets, one should use the "All ports" version, and use:
    $ ./configure --with-gtk --disable-precomp-headers --disable-shared
    before make and make install.
  - Split the user manual into a user manual and a developer's manual ?



				 -----------------
    ------
IX) GFORGE
    ------

* WISHLIST
  - Use the bug/feature trackers instead of this TODO file ?

